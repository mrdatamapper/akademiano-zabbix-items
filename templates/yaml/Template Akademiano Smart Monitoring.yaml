---
zabbix_export:
  version: 4.4
  groups:
    group:
    - name: Templates/Akademiano
    - name: Templates/Server hardware
  templates:
    template:
      template: Template Akademiano Smart Monitoring
      name: Template Akademiano Smart Monitoring
      description: 'https://github.com/v-zhuravlev/zbx-smartctl

        3.4 version with dependent items. Please check your UserParameters.

        Template version: v1.5'
      groups:
        group:
        - name: Templates/Akademiano
        - name: Templates/Server hardware
      applications:
        application:
          name: SMART monitoring (smartctl)
      discovery_rules:
        discovery_rule:
        - name: smartctl-disks-discovery (HDD)
          type: ZABBIX_ACTIVE
          key: uHDD.discovery["{$SMARTCTL_STATIC_DISKS}"]
          delay: 1h
          filter:
            conditions:
              condition:
              - macro: '{#SMART_ENABLED}'
                value: 1
                formulaid: B
              - macro: '{#DISKTYPE}'
                value: 0
                formulaid: A
          description: "SMARTCTL_STATIC_DISKS - add additional disks in this macro with -d option. Replace all spaces with '_' inside each disk command. Separate multiple disks with space. \nFor example, to discover 2 drives behind hardware RAID, set this macro on the host level:\n\nSMARTCTL_STATIC_DISKS = /dev/sda_-d_sat+megaraid,00 /dev/sda_-d_sat+megaraid,01\n\nUseful for disks that cannot be easily discovered such as disks hidden behind RAID or when agent is installed on Windows or Mac where automatic discovery is not so powerful. \n\nSetting this macro doesn't prevent any automatic attempts to discover disks using smartctl --scan-open and so on."
          item_prototypes:
            item_prototype:
            - name: '{#DISKNAME}: smartctl'
              key: uHDD.get["{#DISKCMD}"]
              delay: 1h
              history: 1d
              trends: 0
              value_type: TEXT
              applications:
                application:
                  name: SMART monitoring (smartctl)
              trigger_prototypes:
                trigger_prototype:
                  expression: '{str("FAILING_NOW")}=1'
                  name: '{#DISKNAME}: one or more SMART attributes are FAILING_NOW'
                  priority: AVERAGE
                  description: Check test result output for details.
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: Test result'
              type: DEPENDENT
              key: uHDD.health["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:SMART overall-health self-assessment test result:|SMART Health Status:) +\b([\S ]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                - expression: '{count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                    {count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                  name: '{#DISKNAME}: SMART status is not OK'
                  priority: WARNING
                  dependencies:
                    dependency:
                      name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].str("FAILED!")}=1'
                - expression: '{str("FAILED!")}=1'
                  name: '{#DISKNAME}: SMART test status: FAILED!'
                  priority: AVERAGE
            - name: '{#DISKNAME}: Device model'
              type: DEPENDENT
              key: uHDD.model.["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '(?:Vendor: +(.+)\nProduct:|[Dd]evice [Mm]odel:|[Mm]odel [Nn]umber:) +(.+)

                    \1 \2'
                - type: LTRIM
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  params: '{$THROTTLE_HEARTBEAT_LONG}'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
            - name: '{#DISKNAME}: Serial number'
              type: DEPENDENT
              key: uHDD.sn.["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '[Ss]erial [Nn]umber: +(.+)

                    \1'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  params: '{$THROTTLE_HEARTBEAT_LONG}'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{diff()}=1  and {strlen()}>0'
                  name: '{#DISKNAME}: Disk has been replaced (new serial number received)'
                  priority: INFO
                  description: 'Last value: {ITEM.LASTVALUE1}.

                    Device serial number has changed. Ack to close'
            - name: '{#DISKNAME}: ID 5 Reallocated sectors count'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",5 Reallocated]
              delay: 0
              history: 7d
              trends: 0
              description: "Count of reallocated sectors. The raw value represents a count of the bad sectors that have been found and remapped.Thus, the higher the attribute value, the more sectors the drive has had to reallocate. This value is primarily used as a metric of the life expectancy of the drive; a drive which has had any reallocations at all is significantly more likely to fail in the immediate months.\nhttps://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes \n\nFor SATA disks, mapped to 'ID 5 Reallocated Sectors Count'\nFor Kingston disks, mapped to 'ID 5 Retired Block Count'\nFor SAS disks, number of 'Elements in grown defect list' is used."
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:5 Reallocate.+|5 Retired_Block_Count.+|Elements in grown defect list:)(?:[\t ]+)([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{delta(7d)}>0'
                  name: '{#DISKNAME}: SMART Reallocated Sectors Count has been registered'
                  priority: AVERAGE
                  description: 'Count of reallocated sectors. The raw value represents a count of the bad sectors that have been found and remapped.Thus, the higher the attribute value, the more sectors the drive has had to reallocate. This value is primarily used as a metric of the life expectancy of the drive; a drive which has had any reallocations at all is significantly more likely to fail in the immediate months.


                    Trigger: Timeouts in 7 days if there are no new reallocated sectors.'
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: ID 197 Current pending sector count'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",Current_Pending_Sector]
              delay: 0
              history: 7d
              trends: 0
              description: 'SATA: ID 197 Current Pending Sector Count. Count of "unstable" sectors (waiting to be remapped, because of unrecoverable read errors). If an unstable sector is subsequently read successfully, the sector is remapped and this value is decreased. Read errors on a sector will not remap the sector immediately (since the correct value cannot be read and so the value to remap is not known, and also it might become readable later); instead, the drive firmware remembers that the sector needs to be remapped, and will remap it the next time it''s written.

                However, some drives will not immediately remap such sectors when written; instead the drive will first attempt to write to the problem sector and if the write operation is successful then the sector will be marked good (in this case, the "Reallocation Event Count" (0xC4) will not be increased). This is a serious shortcoming, for if such a drive contains marginal sectors that consistently fail only after some time has passed following a successful write operation, then the drive will never remap these problem sectors.

                https://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes

                SAS: Not supported.'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '197 Current_Pending_Sector.+ ([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{delta(3d)}>0'
                  name: '{#DISKNAME}: SMART Current Pending Sector counter incremented'
                  priority: WARNING
                  description: 'Count of "unstable" sectors (waiting to be remapped, because of unrecoverable read errors). If an unstable sector is subsequently read successfully, the sector is remapped and this value is decreased. Read errors on a sector will not remap the sector immediately (since the correct value cannot be read and so the value to remap is not known, and also it might become readable later); instead, the drive firmware remembers that the sector needs to be remapped, and will remap it the next time it''s written.

                    However, some drives will not immediately remap such sectors when written; instead the drive will first attempt to write to the problem sector and if the write operation is successful then the sector will be marked good (in this case, the "Reallocation Event Count" (0xC4) will not be increased). This is a serious shortcoming, for if such a drive contains marginal sectors that consistently fail only after some time has passed following a successful write operation, then the drive will never remap these problem sectors.


                    Triiger: Timeouts in 3 days if ther are no new sectors'
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART Reallocated Sectors Count has been registered'
                      expression: '{Template Akademiano Smart Monitoring:uHDD["{#DISKCMD}",5 Reallocated].delta(7d)}>0'
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: ID 198 Uncorrectable errors count'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",Offline_Uncorrectable]
              delay: 0
              history: 7d
              trends: 0
              description: "SATA: ID 198 (Offline) Uncorrectable Sector Count. The total count of uncorrectable errors when reading/writing a sector. A rise in the value of this attribute indicates defects of the disk surface and/or problems in the mechanical subsystem.\nhttps://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes\nSAS: error counter log should be parsed with JS in Zabbix 4.2: read+write\n\"Error counter log\n           Errors Corrected by           Total   Correction     Gigabytes    Total\n               ECC          rereads/    errors   algorithm      processed    uncorrected\n           fast | delayed   rewrites  corrected  invocations   [10^9 bytes]  errors\nread:    2242530    24029   1718309   2266559      30372     409777.659           0\nwrite:   1685701     2629      5464   1688330       2636      35228.365           0\nverify:     4400        2         2      4402          2        432.531           0\". Should be added to SSD as well."
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: 'Offline_Uncorrectable.+ ([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{delta(7d)}>0'
                  name: '{#DISKNAME}: SMART (Offline) Uncorrectable Sector Count has been registered'
                  priority: AVERAGE
                  description: 'The total count of uncorrectable errors when reading/writing a sector. A rise in the value of this attribute indicates defects of the disk surface and/or problems in the mechanical subsystem.


                    Trigger: Timeouts in 7 days if there are no new reallocated sectors.'
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uHDD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: ID 9 Power on hours'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",Power_On]
              delay: 0
              history: 7d
              trends: 0
              units: s
              description: 'Count of hours in power-on state. The raw value of this attribute shows total count of hours (or minutes, or seconds, depending on manufacturer) in power-on state.

                "By default, the total expected lifetime of a hard disk in perfect condition is defined as 5 years (running every day and night on all days). This is equal to 1825 days in 24/7 mode or 43800 hours."


                On some pre-2005 drives, this raw value may advance erratically and/or "wrap around" (reset to zero periodically).

                https://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '(?:Power_On_Hours.+ |Accumulated power on time, hours:minutes |Power On Hours:.+ )([0-9]+)

                    \1'
                - type: MULTIPLIER
                  params: 3600
              master_item:
                key: uHDD.get["{#DISKCMD}"]
            - name: '{#DISKNAME}: ID 10 Spin retry count'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",Spin_Retry_Count]
              delay: 0
              history: 7d
              trends: 0
              description: 'SATA: ID 10 Spin_Retry_Count. Count of retry of spin start attempts. This attribute stores a total count of the spin start attempts to reach the fully operational speed (under the condition that the first attempt was unsuccessful). An increase of this attribute value is a sign of problems in the hard disk mechanical subsystem.'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '10 Spin_Retry_Count.+ ([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{delta(7d)}>0'
                  name: '{#DISKNAME}: SMART Spin Retry Count has been registered'
                  url: https://kb.acronis.com/content/9110
                  priority: AVERAGE
                  description: 'Spin retry event is logged each time the drive was unable to spin its platters up to the rated rotation speed in the due time. Spin-up attempt was aborted and retried. This typically indicates severe controller or bearing problem, but may be sometimes caused by power supply problems.

                    Trigger: Timeouts in 7 days if there are no spin retry events.'
            - name: '{#DISKNAME}: ID 190/194 Temperature'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",Temperature_Celsius]
              delay: 0
              history: 7d
              trends: 90d
              units: °С
              description: 'Current drive temperature.

                SATA: Parses value from attribute ID 194 or ID 190.

                SAS: Supported

                NVMe: Supported'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:194 Temperature[^(\n]+|Airflow_Temperature[^(\n]+|Drive Temperature:|Temperature:) +([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                - expression: '{avg(5m)}>{$TEMP_CRIT:"HDD"} and

                    {last()}<100'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '{avg(5m)}<{$TEMP_CRIT:"HDD"}-3'
                  name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                  priority: AVERAGE
                - expression: '{avg(5m)}>{$TEMP_WARN:"HDD"}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '{avg(5m)}<{$TEMP_WARN:"HDD"}-3'
                  name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                  priority: WARNING
                  dependencies:
                    dependency:
                      name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                      expression: '{Template Akademiano Smart Monitoring:uHDD["{#DISKCMD}",Temperature_Celsius].avg(5m)}>{$TEMP_CRIT:"HDD"} and

                        {Template Akademiano Smart Monitoring:uHDD["{#DISKCMD}",Temperature_Celsius].last()}<100'
                      recovery_expression: '{Template Akademiano Smart Monitoring:uHDD["{#DISKCMD}",Temperature_Celsius].avg(5m)}<{$TEMP_CRIT:"HDD"}-3'
            - name: '{#DISKNAME}: ID 199 CRC error count'
              type: DEPENDENT
              key: uHDD["{#DISKCMD}",UDMA_CRC_Error]
              delay: 0
              history: 7d
              trends: 0
              description: 'SATA: ID 199 CRC Error Count. The count of errors in data transfer via the interface cable as determined by ICRC (Interface Cyclic Redundancy Check).

                SAS: mapped to ''Non-medium error count''

                NVMe: mapped to ''Media and Data Integrity Errors'''
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:UDMA_CRC_Error|CRC_Error_Count|Non-medium error count:|Media and Data Integrity Errors:).+ ([0-9]+)

                    \1'
              master_item:
                key: uHDD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{last()}>100 and {delta(1d)}>0'
                  name: '{#DISKNAME}: SMART UltraDMA CRC Error Count too high: {ITEM.LASTVALUE}. Check cable!'
                  url: http://www.z-a-recovery.com/man-smart.htm
                  priority: AVERAGE
                  description: 'Low value of this attribute typically indicates that something is wrong with the connectors and/or cables. Disk-to-host transfers are protected by CRC error detection code when Ultra-DMA 66 or 100 is used. So if the data gets garbled between the disk and the host machine, the receiving controller senses this and the retransmission is initiated. Such a situation is called "UDMA CRC error". Once the problem is rectified (typically by replacing a cable), the attribute value returns to the normal levels pretty quick.


                    Triger: Timeouts in 1 day if there are no new errors.'
        - name: smartctl-disks-discovery (SSD)
          type: ZABBIX_ACTIVE
          key: uSSD.discovery["{$SMARTCTL_STATIC_DISKS}"]
          delay: 1h
          filter:
            conditions:
              condition:
              - macro: '{#SMART_ENABLED}'
                value: 1
                formulaid: B
              - macro: '{#DISKTYPE}'
                value: 1
                formulaid: A
          description: "SMARTCTL_STATIC_DISKS - add additional disks in this macro with -d option. Replace all spaces with '_' inside each disk command. Separate multiple disks with space. \nFor example, to discover 2 drives behind hardware RAID, set this macro on the host level:\n\nSMARTCTL_STATIC_DISKS = /dev/sda_-d_sat+megaraid,00 /dev/sda_-d_sat+megaraid,01\n\nUseful for disks that cannot be easily discovered such as disks hidden behind RAID or when agent is installed on Windows or Mac where automatic discovery is not so powerful. \n\nSetting this macro doesn't prevent any automatic attempts to discover disks using smartctl --scan-open and so on."
          item_prototypes:
            item_prototype:
            - name: '{#DISKNAME}: smartctl'
              key: uSSD.get["{#DISKCMD}"]
              delay: 5m
              history: 1d
              trends: 0
              value_type: TEXT
              applications:
                application:
                  name: SMART monitoring (smartctl)
              trigger_prototypes:
                trigger_prototype:
                  expression: '{str("FAILING_NOW")}=1'
                  name: '{#DISKNAME}: one or more SMART attributes are FAILING_NOW'
                  priority: AVERAGE
                  description: Check test result output for details.
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: Test result'
              type: DEPENDENT
              key: uSSD.health["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:SMART overall-health self-assessment test result:|SMART Health Status:) +\b([\S ]+)

                    \1'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                - expression: '{count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                    {count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                  name: '{#DISKNAME}: SMART status is not OK'
                  priority: WARNING
                  dependencies:
                    dependency:
                      name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].str("FAILED!")}=1'
                - expression: '{str("FAILED!")}=1'
                  name: '{#DISKNAME}: SMART test status: FAILED!'
                  priority: AVERAGE
            - name: '{#DISKNAME}: Device model'
              type: DEPENDENT
              key: uSSD.model.["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '(?:Vendor: +(.+)\nProduct:|[Dd]evice [Mm]odel:|[Mm]odel [Nn]umber:) +(.+)

                    \1 \2'
                - type: LTRIM
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  params: '{$THROTTLE_HEARTBEAT_LONG}'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
            - name: '{#DISKNAME}: Serial number'
              type: DEPENDENT
              key: uSSD.sn.["{#DISKCMD}"]
              delay: 0
              history: 7d
              trends: 0
              value_type: CHAR
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '[Ss]erial [Nn]umber: +(.+)

                    \1'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  params: '{$THROTTLE_HEARTBEAT_LONG}'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{diff()}=1  and {strlen()}>0'
                  name: '{#DISKNAME}: Disk has been replaced (new serial number received)'
                  priority: INFO
                  description: 'Last value: {ITEM.LASTVALUE1}.

                    Device serial number has changed. Ack to close'
            - name: '{#DISKNAME}: ID 5 Reallocated sectors count'
              type: DEPENDENT
              key: uSSD["{#DISKCMD}",5 Reallocated]
              delay: 0
              history: 7d
              trends: 0
              description: "Count of reallocated sectors. The raw value represents a count of the bad sectors that have been found and remapped.Thus, the higher the attribute value, the more sectors the drive has had to reallocate. This value is primarily used as a metric of the life expectancy of the drive; a drive which has had any reallocations at all is significantly more likely to fail in the immediate months.\nhttps://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes \n\nFor SATA disks, mapped to 'ID 5 Reallocated Sectors Count'\nFor Kingston disks, mapped to 'ID 5 Retired Block Count'\nFor SAS disks, number of 'Elements in grown defect list' is used."
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:5 Reallocate.+|5 Retired_Block_Count.+|Elements in grown defect list:)(?:[\t ]+)([0-9]+)

                    \1'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{delta(7d)}>0'
                  name: '{#DISKNAME}: SMART Reallocated Sectors Count has been registered'
                  priority: AVERAGE
                  description: 'Count of reallocated sectors. The raw value represents a count of the bad sectors that have been found and remapped.Thus, the higher the attribute value, the more sectors the drive has had to reallocate. This value is primarily used as a metric of the life expectancy of the drive; a drive which has had any reallocations at all is significantly more likely to fail in the immediate months.


                    Trigger: Timeouts in 7 days if there are no new reallocated sectors.'
                  dependencies:
                    dependency:
                    - name: '{#DISKNAME}: SMART status is not OK'
                      expression: '{Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SATA"},ne)}=1 and

                        {Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].count(#1,{$SMARTCTL_OK_STATUS:"SAS"},ne)}=1'
                    - name: '{#DISKNAME}: SMART test status: FAILED!'
                      expression: '{Template Akademiano Smart Monitoring:uSSD.health["{#DISKCMD}"].str("FAILED!")}=1'
            - name: '{#DISKNAME}: ID 9 Power on hours'
              type: DEPENDENT
              key: uSSD["{#DISKCMD}",Power_On]
              delay: 0
              history: 7d
              trends: 0
              units: s
              description: 'Count of hours in power-on state. The raw value of this attribute shows total count of hours (or minutes, or seconds, depending on manufacturer) in power-on state.

                "By default, the total expected lifetime of a hard disk in perfect condition is defined as 5 years (running every day and night on all days). This is equal to 1825 days in 24/7 mode or 43800 hours."


                On some pre-2005 drives, this raw value may advance erratically and/or "wrap around" (reset to zero periodically).

                https://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                - type: REGEX
                  params: '(?:Power_On_Hours.+ |Accumulated power on time, hours:minutes |Power On Hours:.+ )([0-9]+)

                    \1'
                - type: MULTIPLIER
                  params: 3600
              master_item:
                key: uSSD.get["{#DISKCMD}"]
            - name: '{#DISKNAME}: ID 177/202/233 SSD wearout'
              type: DEPENDENT
              key: uSSD["{#DISKCMD}",SSD wearout]
              delay: 0
              history: 7d
              units: '%'
              description: 'SATA: Multiple IDs are used, depending on the vendor: 177 Wear Leveling Count:

                "The Wear Leveling Count (WLC) SMART value gives us all the data we need. The current value stands for the remaining endurance of the drive in percentage, meaning that it starts from 100 and decreases linearly as the drive is written to. The raw WLC value counts the consumed P/E cycles, so if these two values are monitored while writing to the drive, sooner than later we will find the spot where the normalized value drops by one."

                http://www.anandtech.com/show/8239/update-on-samsung-850-pro-endurance-vnand-die-size


                Number of erase/program cycles per block on average. This attribute is intended to be an indicator of imminent wear-out. Normalized Equation: 100 – ( 100 * Average Erase Count / NAND max rated number of erase cycles)


                233 Media Wearout Indicator:

                Intel SSDs report a normalized value from 100, a new drive, to a minimum of 1. It decreases while the NAND erase cycles increase from 0 to the maximum-rated cycles.

                202 Percent_Lifetime_Used:

                A value of 0% indicates that 100% of the expected lifetime has been used.

                SAS: ''Percentage used endurance indicator:'' can be used, but it must inversed: 100%-used first. For that Zabbix 4.2 preprocessing is required.

                NVMe: ''Available Spare:'' value is used, where 100% idicated new drive and 0% indicates that 100% of the expected lifetime has been used.'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:(?:177 Wear_Leveling_Count|202 Percent_Lifetime_Used|202 Percent_Lifetime_Remain|230 Media_Wearout_Indicator|233 Media_Wearout_Indicator|231 SSD_Life_Left) +0x[0-9a-z]+|Available Spare:) +([0-9]+)

                    \1'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                - expression: '{last()}<5'
                  name: '{#DISKNAME}: SSD wearout (<5% left)'
                  priority: AVERAGE
                - expression: '{last()}<10'
                  name: '{#DISKNAME}: SSD wearout (<10% left)'
                  priority: WARNING
                  dependencies:
                    dependency:
                      name: '{#DISKNAME}: SSD wearout (<5% left)'
                      expression: '{Template Akademiano Smart Monitoring:uSSD["{#DISKCMD}",SSD wearout].last()}<5'
            - name: '{#DISKNAME}: ID 190/194 Temperature'
              type: DEPENDENT
              key: uSSD["{#DISKCMD}",Temperature_Celsius]
              delay: 0
              history: 7d
              trends: 90d
              units: °С
              description: 'Current drive temperature.

                SATA: Parses value from attribute ID 194 or ID 190.

                SAS: Supported

                NVMe: Supported'
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:194 Temperature[^(\n]+|Airflow_Temperature[^(\n]+|Drive Temperature:|Temperature:) +([0-9]+)

                    \1'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                - expression: '{avg(5m)}>{$TEMP_CRIT:"HDD"} and

                    {last()}<100'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '{avg(5m)}<{$TEMP_CRIT:"HDD"}-3'
                  name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                  priority: AVERAGE
                - expression: '{avg(5m)}>{$TEMP_WARN:"HDD"}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '{avg(5m)}<{$TEMP_WARN:"HDD"}-3'
                  name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                  priority: WARNING
                  dependencies:
                    dependency:
                      name: '{#DISKNAME}: Disk temperature: {ITEM.LASTVALUE}'
                      expression: '{Template Akademiano Smart Monitoring:uSSD["{#DISKCMD}",Temperature_Celsius].avg(5m)}>{$TEMP_CRIT:"HDD"} and

                        {Template Akademiano Smart Monitoring:uSSD["{#DISKCMD}",Temperature_Celsius].last()}<100'
                      recovery_expression: '{Template Akademiano Smart Monitoring:uSSD["{#DISKCMD}",Temperature_Celsius].avg(5m)}<{$TEMP_CRIT:"HDD"}-3'
            - name: '{#DISKNAME}: ID 199 CRC error count'
              type: DEPENDENT
              key: uSSD["{#DISKCMD}",UDMA_CRC_Error]
              delay: 0
              history: 7d
              trends: 0
              description: 'SATA: ID 199 CRC Error Count. The count of errors in data transfer via the interface cable as determined by ICRC (Interface Cyclic Redundancy Check).

                SAS: mapped to ''Non-medium error count''

                NVMe: mapped to ''Media and Data Integrity Errors'''
              applications:
                application:
                  name: SMART monitoring (smartctl)
              preprocessing:
                step:
                  type: REGEX
                  params: '(?:UDMA_CRC_Error|CRC_Error_Count|Non-medium error count:|Media and Data Integrity Errors:).+ ([0-9]+)

                    \1'
              master_item:
                key: uSSD.get["{#DISKCMD}"]
              trigger_prototypes:
                trigger_prototype:
                  expression: '{last()}>100 and {delta(1d)}>0'
                  name: '{#DISKNAME}: SMART UltraDMA CRC Error Count too high: {ITEM.LASTVALUE}. Check cable!'
                  url: http://www.z-a-recovery.com/man-smart.htm
                  priority: AVERAGE
                  description: 'Low value of this attribute typically indicates that something is wrong with the connectors and/or cables. Disk-to-host transfers are protected by CRC error detection code when Ultra-DMA 66 or 100 is used. So if the data gets garbled between the disk and the host machine, the receiving controller senses this and the retransmission is initiated. Such a situation is called "UDMA CRC error". Once the problem is rectified (typically by replacing a cable), the attribute value returns to the normal levels pretty quick.


                    Triger: Timeouts in 1 day if there are no new errors.'
      macros:
        macro:
        - macro: '{$SMARTCTL_OK_STATUS:"SAS"}'
          value: OK
        - macro: '{$SMARTCTL_OK_STATUS:"SATA"}'
          value: PASSED
        - macro: '{$SMARTCTL_STATIC_DISKS}'
        - macro: '{$TEMP_CRIT:"HDD"}'
          value: 65
        - macro: '{$TEMP_WARN:"HDD"}'
          value: 50
        - macro: '{$THROTTLE_HEARTBEAT_FAST}'
          value: 5m
        - macro: '{$THROTTLE_HEARTBEAT_LONG}'
          value: 1d
        - macro: '{$THROTTLE_HEARTBEAT_MIDDLE}'
          value: 1h
        - macro: '{$THROTTLE_HEARTBEAT_SHORT}'
          value: 15m
...
